/**
  ******************************************************************************
  * @file    UART/UART_TwoBoards_ComIT/Src/main.c 
  * @author  MCD Application Team
  * @version V1.6.0
  * @date    27-May-2016
  * @brief   This sample code shows how to use UART HAL API to transmit
  *          and receive a data buffer with a communication process based on
  *          IT transfer. 
  *          The communication is done using 2 Boards.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; COPYRIGHT(c) 2016 STMicroelectronics</center></h2>
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "ringbuf.h"
#include <string.h>
#include "rs485.h"
#include "do.h"
#include "stm32f0xx_hal.h"
#include "SPI.h"
#include "S25FL1.h"
#include "bootloader.h"
#include "Time.h"
#include "stm32f0xx_hal_iwdg.h"
#include "data_base.h"
#include "temperature.h"
#include "ctrl_air.h"
#include "system_start.h"
/** @addtogroup STM32F0xx_HAL_Examples
  * @{
  */

/** @addtogroup UART_TwoBoards_ComIT
  * @{
  */ 
/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/

/* UART handler declaration */
__IO ITStatus UartReady           = RESET;
__IO uint32_t UserButtonStatus     = 0;  /* set to 1 after User Button interrupt  */
IWDG_HandleTypeDef 	hwwdg;
/* variable for control air condition */
static uint32_t the_last_time = 0;
static uint8_t  count_time  = 0 ;
#define NUMBER_COUNT_ONE_SECOND 5
#define	APPLICATION_ADDRESS     (uint32_t)0x8004000

#if   (defined ( __CC_ARM ))
__IO uint32_t VectorTable[48]  __attribute__((at(0x20000000)));
#elif (defined (__ICCARM__))
#pragma location = 0x20000000
  __no_init __IO uint32_t VectorTable[48];
#elif defined   (  __GNUC__  )
  __IO uint32_t VectorTable[48] __attribute__((section(".RAMVectorTable")));
#elif defined ( __TASKING__ )
  __IO uint32_t VectorTable[48] __at(0x20000000);
#endif

extern uint8_t flag_timer	;
char	 							   Debug_Arr[50]		   = {0};
uint8_t								   debug_len;
extern uint8_t  request_read_sensor;
#define IWDG_Window		  0x00
#define IWDG_Counter	  0x13A /* 2 second */
#define TURN_ON_ALL_AIR   0x03

/* Private function prototypes -----------------------------------------------*/
static void SystemClock_Config(void);
static void Error_Handler(void);
static void IWDG_Initialize(void);
/**
  * @brief  Main program
  * @param  None
  * @retval None
  */
uint8_t debug[60];
uint8_t len = 0;
int main(void)
{
    /* STM32F0xx HAL library initialization:
       - Configure the Flash prefetch
       - Systick timer is configured by default as source of time base, but user 
         can eventually implement his proper time base source (a general purpose 
         timer for example or other time source), keeping in mind that Time base 
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Low Level Initialization
    */
	uint32_t i = 0;
 /*!< At this stage the microcontroller clock setting is already configured, 
       this is done through SystemInit() function which is called from startup
       file (startup_stm32f0xx.s) before to branch to application main.
       To reconfigure the default setting of SystemInit() function, refer to
       system_stm32f0xx.c file
     */ 
  /* Copy the vector table from the Flash (mapped at the base of the application
     load address 0x08004000) to the base address of the SRAM at 0x20000000. */
  for(i = 0; i < 48; i++)
  {
      VectorTable[i] = *(__IO uint32_t*)(APPLICATION_ADDRESS + (i<<2));
	  
  } 
    __disable_irq();
   __HAL_RCC_SYSCFG_CLK_ENABLE();
    __HAL_SYSCFG_REMAPMEMORY_SRAM(); 
    __enable_irq();
    char arr_debug[50];
	uint8_t len = 0;
    HAL_Init();
    /* Configure the system clock to 48 MHz */
    SystemClock_Config();
	/* Initialize  */
	UART_Debug_Init();
	air_init();
	if( Config_Init() != Initial_OK)
	{
		
		len = sprintf((char *)&debug[0],"Init faile! \n");
		UART_Send(&debug[0],len);
//		return Initial_ERROR;
	}	
	/* setup timer */
	timer16_init();
	/* get time */
	IWDG_Initialize(); /* watch dog */
	/* temp init */
	sensor_temp_init();
	len = sprintf((char *)&debug[0],"Init done! \n");
	UART_Send(&debug[0],len);
	/* test he thong */
	//test_system();
	RS485_Init();  
	RS485_Listen();
	while (1)
    {		
		HAL_IWDG_Refresh(&hwwdg);	
		WATCHDOG_REFRESH();
		RS485_GetRequest();
		/* neu co su kien timeout thi tien hanh xu li timer */
		if(HAL_GetTick() - the_last_time >= 200)
		{
			count_time ++;
			WATCHDOG_REFRESH();
			if(count_time > NUMBER_COUNT_ONE_SECOND) /* moi giay xu li mot lan */
			{
				process_timeover();
				count_time = 0;
			}
			the_last_time = HAL_GetTick();
		}		
		if(request_read_sensor)
		{
			if(tempearture_read() < 0)
			{
				/* to do */
			}
			else
			{

			}
			/* xoa co khi done */
			request_read_sensor  = 0;
		};
    }
}

/**
  * @brief  System Clock Configuration
  *         The system Clock is configured as follow : 
  *            System Clock source            = PLL (HSI/2)
  *            SYSCLK(Hz)                     = 48000000
  *            HCLK(Hz)                       = 48000000
  *            AHB Prescaler                  = 1
  *            APB1 Prescaler                 = 1
  *            HSI Frequency(Hz)              = 8000000
  *            PREDIV                         = 1
  *            PLLMUL                         = 12
  *            Flash Latency(WS)              = 1
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void)
{
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* No HSE Oscillator on Nucleo, Activate PLL with HSI/2 as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_NONE;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
	{
		/*Error_Handler(); */
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1)!= HAL_OK)
	{
		/*Error_Handler();*/
	}
}

/**
  * @brief  Tx Transfer completed callback
  * @param  UartHandle: UART handle. 
  * @note   This example shows a simple way to report end of IT Tx transfer, and 
  *         you can add your own implementation. 
  * @retval None
  */

/**
  * @brief  Rx Transfer completed callback
  * @param  UartHandle: UART handle
  * @note   This example shows a simple way to report end of DMA Rx transfer, and 
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
	RS485_GetChar();
	RS485_Listen();
}

/**
  * @brief  UART error callbacks
  * @param  UartHandle: UART handle
  * @param  __HANDLE__: specifies the UART Handle.
  * @param  __FLAG__: specifies the flag to check.
  * This parameter can be any combination of the following values:
  * @arg UART_CLEAR_PEF,      Parity Error Clear Flag           
  * @arg UART_CLEAR_FEF,      Framing Error Clear Flag          
  * @arg UART_CLEAR_NEF,      Noise detected Clear Flag         
  * @arg UART_CLEAR_OREF,     OverRun Error Clear Flag                                 
  * @note  This function called  when orcur frame error or overrun
  * @retval None
  */
static void IWDG_Initialize(void)
{
	
	hwwdg.Instance = IWDG; /* WWDG_BASE */
	/* Set the IWDG prescaler, refresh window and counter value using HAL_WWDG_Init() function. */
	hwwdg.Init.Prescaler = IWDG_PRESCALER_256; 
	/* 48 MHz(PCLK) => Max time (mS) = 1000 * (Counter-0x40) = 5.46 ms */
	/* refresh window */
	hwwdg.Init.Window = IWDG_Window;
	/* counter value */
	hwwdg.Init.Reload = IWDG_Counter;
	
	HAL_IWDG_Init(&hwwdg);
	
	if(HAL_IWDG_Start(&hwwdg) != HAL_OK)
	{
		while(1);
	};
	
}

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
	/* initialize */
	RS485_Init(); 
	RS485_Listen();
}



/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
}

#ifdef  USE_FULL_ASSERT

/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t* file, uint32_t line)
{ 
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
	while (1)
	{
	}
}
#endif

/**
  * @}
  */

/**
  * @}
  */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
